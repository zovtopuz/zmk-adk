/*
* Copyright (c) 2021 Nick Winans
*
* SPDX-License-Identifier: MIT
*/
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define HM_TAPPING_TERM 280
#define HM_TAPPING_TERM_FAST 200
#define HM_RPI 150
#define HM_RPI_FAST 50

#define NV 1

/ {
	combos {
		compatible = "zmk,combos";
		combo_studio {
			timeout-ms = <50>;
			key-positions = <30 31>;
			layers = <NV>;
			require-prior-idle-ms = <200>;
			bindings = <&studio_unlock>;
		};
	};
	
	behaviors {
		hl: home_row_mod_left {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <HM_TAPPING_TERM>;
			require-prior-idle-ms = <HM_RPI>;
			hold-trigger-key-positions = < KEYS_R THUMBS NP>;
			hold-trigger-on-release;
			bindings = <&kp>, <&kp>;
		};
		
		hr: home_row_mod_right {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <HM_TAPPING_TERM>;
			require-prior-idle-ms = <HM_RPI>;
			hold-trigger-key-positions = < KEYS_L THUMBS NP>;
			hold-trigger-on-release;
			bindings = <&kp>, <&kp>;
		};
		
		hls: home_row_mod_left_shift {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <HM_TAPPING_TERM_FAST>;
			require-prior-idle-ms = <HM_RPI_FAST>;
			hold-trigger-key-positions = < KEYS_R THUMBS NP>;
			bindings = <&kp>, <&kp>;
			hold-trigger-on-release;
		};
		
		hrs: home_row_mod_right_shift {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <HM_TAPPING_TERM_FAST>;
			require-prior-idle-ms = <HM_RPI_FAST>;
			hold-trigger-key-positions = < KEYS_L THUMBS NP>;
			bindings = <&kp>, <&kp>;
			hold-trigger-on-release;
		};
		
		mqt: momentary-quick-tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <125>;
			require-prior-idle-ms = <HM_RPI>;
			bindings = <&mo>, <&kp>;
		};
		
		// except this one, which is handy for js
		ZMK_MACRO(af,
		wait-ms = <30>;
		tap-ms = <40>;
		bindings = <&kp EQUAL  &kp GT>;
		)
	};
	
	//	M0487 Apple Standard Keyboard II
	//	                    +-------+
	//	                    | power |
	//	                    +-------+
	//	+---+---+---+---+---+---+---+---+---+---+---+---+---+-----+ +---+---+---+---+
	//	| ` | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | - | = | bks | |clr| = | / | * |
	//	+---------------------------------------------------------+ +---+---+---+---+
	//	| tab | q | w | e | r | t | y | u | i | o | p | [ | ] |re | | 7 | 8 | 9 | - |
	//	+------------------------------------------------------tu-+ +---+---+---+---+
	//	| caps | a | s | d | f | g | h | j | k | l | ; | ' | \ |rn| | 4 | 5 | 6 | + |
	//	+---------------------------------------------------------+ +---+---+---+---+
	//	| shift  | z | x | c | v | b | n | m | , | . | / |shift|up| | 1 | 2 | 3 |   |
	//	+---------------------------------------------------------+ +-------+---|ent|
	//	| ctrl | opt | comnd |                    |esc|lef|rig|dwn| |   0   | . |   |
	//	+---------------------------------------------------------+ +-------+---+---+
	//	
	keymap {
		compatible = "zmk,keymap";
		
		qwerty_layer {
			bindings = <
			&kp GRAVE &kp N1   &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS &kp EQUAL &kp BSPC		                       &kp KP_CLEAR   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY
			&kp TAB   &kp Q    &kp W   &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I     &kp O      &kp P     &kp LBKT  &kp RBKT     &kp RET              &kp KP_N7      &kp KP_N8    &kp KP_N9     &kp KP_MINUS
			&mqt NV CAPS       &kp A   &kp S  &kp D  &kp F  &kp G  &kp H  &kp J     &kp K      &kp L     &kp SEMI  &mqt NV SQT &kp BSLH	 	           &kp KP_N4      &kp KP_N5    &kp KP_N6     &kp KP_PLUS
			&kp LSHFT &kp Z  &kp Z    &kp X   &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA &kp DOT    &kp FSLH  &kp LSHFT &kp UP                     &kp KP_N1      &kp KP_N2    &kp KP_N3     &kp KP_ENTER
			&kp LCTRL &kp LALT &kp LGUI           &kp SPACE            &kp ESC   &kp LEFT   &kp RIGHT           &kp DOWN                             &kp KP_N0                   &kp KP_DOT
			>;
		};
		
		nav_layer {
			bindings = <
			&trans &kp F1         &kp F2        &kp F3         &kp F4           &kp F5 &kp F6    &kp F7          &kp F8        &kp F9        &kp F10         &kp F11  &kp F12  &trans												&trans &trans &trans &trans
			&trans &kp EXCL       &kp AT        &kp LBKT       &kp RBKT         &bt BT_CLR       &bt BT_NXT      &kp HOME      &kp PG_DN     &kp PG_UP       &kp END  &trans   &trans &trans								&trans &trans &trans &trans
			&trans &hl LCTRL LPAR &hl LALT RPAR &hl LGUI LBRC  &hls LSHFT RBRC  &af &out OUT_TOG &hrs LSHFT LARW &hr RGUI DARW &hr RALT UARW &hr RCTRL RARW  &trans   &trans   &trans &trans &trans &trans
			&kp LT &kp SLASH      &kp EQUAL     &kp GT &trans  &trans &kp LS(LG(Z))  &kp LG(Z)   &kp LG(X) &kp LG(C)  &kp LG(V)  &trans											 &trans   &trans   &trans
			&trans &trans &trans             &trans              &trans  &trans &trans &trans   &trans       												    	                   &trans   &trans   &trans
			>;
		};
	};
};

